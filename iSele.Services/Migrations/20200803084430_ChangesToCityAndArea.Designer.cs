// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iSele.Services;

namespace iSele.Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200803084430_ChangesToCityAndArea")]
    partial class ChangesToCityAndArea
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("iSele")
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("iSele.Models.Accounts.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InvoiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("InvoiceTypeID");

                    b.HasIndex("InvoiceTypeName")
                        .IsUnique();

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTermName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool?>("UseDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("PaymentTermID");

                    b.HasIndex("PaymentTermName")
                        .IsUnique();

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PaymentTypeID");

                    b.HasIndex("PaymentTypeName")
                        .IsUnique();

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceGroup", b =>
                {
                    b.Property<int>("PriceGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int?>("PriceListTypeID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PriceGroupID");

                    b.HasIndex("PriceGroupName")
                        .IsUnique();

                    b.HasIndex("PriceListTypeID")
                        .IsUnique()
                        .HasFilter("[PriceListTypeID] IS NOT NULL");

                    b.ToTable("PriceGroups");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceLevel", b =>
                {
                    b.Property<int>("PriceLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PriceLeveTypeID")
                        .HasColumnType("int");

                    b.Property<string>("PriceLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PriceLevelID");

                    b.HasIndex("PriceLevelName");

                    b.ToTable("PriceLevels");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceListType", b =>
                {
                    b.Property<int>("PriceListTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceListName")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("PriceTypeID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("VATTaxTypeID")
                        .HasColumnType("int");

                    b.HasKey("PriceListTypeID");

                    b.HasIndex("PriceListName");

                    b.HasIndex("VATTaxTypeID")
                        .IsUnique()
                        .HasFilter("[VATTaxTypeID] IS NOT NULL");

                    b.ToTable("PriceListTypes");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceTypeByPercent", b =>
                {
                    b.Property<int>("PriceTypeByPercentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precentage")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("PriceTypeByPercentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PriceTypeByPercentID");

                    b.HasIndex("PriceTypeByPercentName")
                        .IsUnique();

                    b.ToTable("PriceTypeByPercents");
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceTypeByValue", b =>
                {
                    b.Property<int>("PriceTypeByValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceTypeByValueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("PriceTypeByValueID");

                    b.HasIndex("PriceTypeByValueName");

                    b.ToTable("PriceTypeByValues");
                });

            modelBuilder.Entity("iSele.Models.Accounts.VATTaxType", b =>
                {
                    b.Property<int>("VATTaxTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("VATTaxName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("VATTaxRate")
                        .HasColumnType("decimal(8,4)");

                    b.HasKey("VATTaxTypeID");

                    b.HasIndex("VATTaxName");

                    b.ToTable("VATTaxTypes");
                });

            modelBuilder.Entity("iSele.Models.ClosureDate", b =>
                {
                    b.Property<int>("ClosureDateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReopen")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("NextPrepDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ClosureDateID");

                    b.HasIndex("EventName")
                        .IsUnique()
                        .HasFilter("[EventName] IS NOT NULL");

                    b.ToTable("ClosureDates");
                });

            modelBuilder.Entity("iSele.Models.Customers.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressLine1");

                    b.HasIndex("AddressLine2");

                    b.HasIndex("AddressLine3");

                    b.HasIndex("CityID")
                        .IsUnique()
                        .HasFilter("[CityID] IS NOT NULL");

                    b.HasIndex("PostalCode");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("iSele.Models.Customers.ContactType", b =>
                {
                    b.Property<int>("ContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsAccountsContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsFulfillmentContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("ContactTypeID");

                    b.HasIndex("ContactTypeName")
                        .IsUnique();

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("iSele.Models.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CustomerTypeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsMobilePrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PrimaryContactFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PrimaryContactLastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerID");

                    b.HasIndex("CustomerName")
                        .IsUnique();

                    b.HasIndex("CustomerTypeID")
                        .IsUnique()
                        .HasFilter("[CustomerTypeID] IS NOT NULL");

                    b.HasIndex("Mobile");

                    b.HasIndex("PrimaryContactEmail");

                    b.HasIndex("PrimaryContactFirstName");

                    b.HasIndex("PrimaryContactLastName");

                    b.HasIndex("Telephone");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerAccountingOptions", b =>
                {
                    b.Property<int>("CustomerAccountingOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccEmails")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AccountContactName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("AccountIsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("FullCompanyName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("InvoiceTypeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPORequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnlyEmailInvoices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("PaymentTermsID")
                        .HasColumnType("int");

                    b.Property<int?>("PriceLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryBillingAddressID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryShippingAddressID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("VATTaxNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerAccountingOptionsID");

                    b.HasIndex("AccEmails");

                    b.HasIndex("AccountContactName");

                    b.HasIndex("FullCompanyName");

                    b.HasIndex("InvoiceTypeID")
                        .IsUnique()
                        .HasFilter("[InvoiceTypeID] IS NOT NULL");

                    b.HasIndex("PaymentTermsID")
                        .IsUnique()
                        .HasFilter("[PaymentTermsID] IS NOT NULL");

                    b.HasIndex("PriceLevelID")
                        .IsUnique()
                        .HasFilter("[PriceLevelID] IS NOT NULL");

                    b.HasIndex("PrimaryBillingAddressID")
                        .IsUnique()
                        .HasFilter("[PrimaryBillingAddressID] IS NOT NULL");

                    b.HasIndex("PrimaryShippingAddressID")
                        .IsUnique()
                        .HasFilter("[PrimaryShippingAddressID] IS NOT NULL");

                    b.HasIndex("VATTaxNum");

                    b.ToTable("CustomerAccountingOptions");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerContact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostalAddressID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ShippingAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("ContactID");

                    b.HasIndex("ContactTypeID")
                        .IsUnique()
                        .HasFilter("[ContactTypeID] IS NOT NULL");

                    b.HasIndex("CustomerID");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("Mobile");

                    b.HasIndex("PostalAddressID")
                        .IsUnique()
                        .HasFilter("[PostalAddressID] IS NOT NULL");

                    b.HasIndex("ShippingAddressID")
                        .IsUnique()
                        .HasFilter("[ShippingAddressID] IS NOT NULL");

                    b.HasIndex("Telephone");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerEquipment", b =>
                {
                    b.Property<int>("CustomerEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("EquipSerialNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("EquipmentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CustomerEquipmentID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EquipSerialNo");

                    b.HasIndex("EquipmentTypeID")
                        .IsUnique()
                        .HasFilter("[EquipmentTypeID] IS NOT NULL");

                    b.ToTable("CustomerEquipment");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerFulfilmentOptions", b =>
                {
                    b.Property<int>("CustomerFulfilmentOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlwaysSendNotification")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("DoesNormallyRespond")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoFulfilled")
                        .HasColumnType("bit");

                    b.Property<int>("LastReminderDate")
                        .HasColumnType("int");

                    b.Property<bool>("PredictionIsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("PreferedDeliveryTimeID")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedDispatchDayID")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedPostalAddressID")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedShippingAddressID")
                        .HasColumnType("int");

                    b.Property<int>("ReminderCount")
                        .HasColumnType("int");

                    b.HasKey("CustomerFulfilmentOptionsID");

                    b.HasIndex("PreferedDeliveryTimeID");

                    b.HasIndex("PreferedDispatchDayID");

                    b.HasIndex("CustomerID", "PreferedPostalAddressID");

                    b.HasIndex("CustomerID", "PreferedShippingAddressID");

                    b.ToTable("CustomerFulfilmentOptions");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerPostalAddress", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID", "AddressID");

                    b.ToTable("CustomerPostalAddresses");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerPrefPerType", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPrefPerTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackagingID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("VarietyID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("ItemID")
                        .IsUnique()
                        .HasFilter("[ItemID] IS NOT NULL");

                    b.HasIndex("PackagingID")
                        .IsUnique()
                        .HasFilter("[PackagingID] IS NOT NULL");

                    b.HasIndex("VarietyID")
                        .IsUnique()
                        .HasFilter("[VarietyID] IS NOT NULL");

                    b.ToTable("CustomerPrefPerTypes");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerShippingAddress", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID", "AddressID");

                    b.ToTable("CustomerShippingAddresses");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("HasExtendedOptions")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CustomerTypeID");

                    b.HasIndex("CustomerTypeName")
                        .IsUnique();

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("iSele.Models.General.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<short?>("EstimatedDeliveryDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("NextDispatchDay")
                        .HasColumnType("smallint");

                    b.Property<short>("NextManufacturingDay")
                        .HasColumnType("smallint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AreaID");

                    b.HasIndex("AreaName")
                        .IsUnique()
                        .HasFilter("[AreaName] IS NOT NULL");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("iSele.Models.General.AreaDaySetting", b =>
                {
                    b.Property<int>("AreaDaySettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaID")
                        .HasColumnType("int");

                    b.Property<int?>("AreaID2")
                        .HasColumnType("int");

                    b.Property<short>("DeliveryOrder")
                        .HasColumnType("smallint");

                    b.Property<short>("DispatchDelayDays")
                        .HasColumnType("smallint");

                    b.Property<short>("EstimateDeliveryDelay")
                        .HasColumnType("smallint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreperationDayOfWeekID")
                        .HasColumnType("int");

                    b.HasKey("AreaDaySettingID");

                    b.HasIndex("AreaID");

                    b.HasIndex("AreaID2");

                    b.HasIndex("PreperationDayOfWeekID");

                    b.ToTable("AreaDaySettings");
                });

            modelBuilder.Entity("iSele.Models.General.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaID")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CityID");

                    b.HasIndex("AreaID");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("iSele.Models.General.DemoEquipment", b =>
                {
                    b.Property<int>("DemoEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DemoEquipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int?>("EquipmentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("DemoEquipmentID");

                    b.HasIndex("DemoEquipmentName")
                        .IsUnique();

                    b.HasIndex("EquipmentTypeID");

                    b.ToTable("DemoEquipment");
                });

            modelBuilder.Entity("iSele.Models.General.DemoEquipmentUsage", b =>
                {
                    b.Property<int>("DemoEquipmentUsageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DemoEquipmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturneDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DemoEquipmentUsageID");

                    b.HasIndex("DemoEquipmentID");

                    b.HasIndex("ReceiveDate");

                    b.ToTable("DemoEquipmentUsage");
                });

            modelBuilder.Entity("iSele.Models.General.EquipmentType", b =>
                {
                    b.Property<int>("EquipmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipmentTypeDesc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EquipmentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EquipmentTypeID");

                    b.HasIndex("EquipmentTypeName")
                        .IsUnique();

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("iSele.Models.General.PostCodeArea", b =>
                {
                    b.Property<int>("PostCodeAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaDayID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCodeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PostCodeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PostCodeAreaID");

                    b.HasIndex("AreaDayID");

                    b.HasIndex("PostCodeEnd");

                    b.HasIndex("PostCodeStart");

                    b.ToTable("PostCodeAreas");
                });

            modelBuilder.Entity("iSele.Models.General.TimeZone", b =>
                {
                    b.Property<int>("TimeZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasDaylightSavings")
                        .HasColumnType("bit");

                    b.Property<string>("ISOAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TimeZoneName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<short>("UTCOffset")
                        .HasColumnType("smallint");

                    b.HasKey("TimeZoneID");

                    b.HasIndex("TimeZoneName")
                        .IsUnique()
                        .HasFilter("[TimeZoneName] IS NOT NULL");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("iSele.Models.Items.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasePriceEXVAT")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BasePriceIncVAT")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CostPriceEXVAT")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CostPriceIncVAT")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ItemAbbreviatedame")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ItemCharacteritics")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ItemDetail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int?>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ItemUnitID")
                        .HasColumnType("int");

                    b.Property<decimal>("QtyPerUnits")
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("ReplacementItemID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint");

                    b.Property<int?>("VATTaxTypeID")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.HasIndex("ItemName")
                        .IsUnique();

                    b.HasIndex("ItemTypeID");

                    b.HasIndex("ItemUnitID");

                    b.HasIndex("ReplacementItemID");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.HasIndex("VATTaxTypeID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("iSele.Models.Items.ItemGroup", b =>
                {
                    b.Property<int>("ItemGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupItemID")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("ItemSortPos")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ItemGroupID");

                    b.HasIndex("GroupItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("iSele.Models.Items.ItemPrice", b =>
                {
                    b.Property<int>("ItemPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceListTypeID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ItemPriceID");

                    b.HasIndex("ItemID");

                    b.HasIndex("PriceListTypeID");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("iSele.Models.Items.ItemType", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ItemTypeID");

                    b.HasIndex("ItemTypeName")
                        .IsUnique();

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("iSele.Models.Items.ItemUnit", b =>
                {
                    b.Property<int>("ItemUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ItemUnitID");

                    b.HasIndex("UnitName")
                        .IsUnique();

                    b.ToTable("ItemUnits");
                });

            modelBuilder.Entity("iSele.Models.Items.Packaging", b =>
                {
                    b.Property<int>("PackagingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BGColour")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("Colour")
                        .HasColumnType("int")
                        .HasMaxLength(11);

                    b.Property<string>("PackagingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("PackagingID");

                    b.HasIndex("PackagingName")
                        .IsUnique();

                    b.ToTable("Packagings");
                });

            modelBuilder.Entity("iSele.Models.Items.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ServiceTypeID");

                    b.HasIndex("ServiceTypeName")
                        .IsUnique();

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("iSele.Models.Items.UsedItemGroup", b =>
                {
                    b.Property<int>("UsedItemGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("GroupItemD")
                        .HasColumnType("int");

                    b.Property<int?>("GroupItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastItemDateChanged")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastItemID")
                        .HasColumnType("int");

                    b.Property<int>("LastItemSortPos")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UsedItemGroupID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("GroupItemID");

                    b.ToTable("UsedItemGroups");
                });

            modelBuilder.Entity("iSele.Models.Items.Variety", b =>
                {
                    b.Property<int>("VarietyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BGColour")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("Colour")
                        .HasColumnType("int")
                        .HasMaxLength(11);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("VarietyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("VarietyID");

                    b.HasIndex("VarietyName")
                        .IsUnique();

                    b.ToTable("Varieties");
                });

            modelBuilder.Entity("iSele.Models.Lookups.PreferedDeliveryTime", b =>
                {
                    b.Property<int>("PreferedDeliveryTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndHour")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StartHour")
                        .HasColumnType("int");

                    b.HasKey("PreferedDeliveryTimeID");

                    b.ToTable("PreferedDeliveryTimes");
                });

            modelBuilder.Entity("iSele.Models.Lookups.WeekDay", b =>
                {
                    b.Property<int>("WeekDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDispatchDay")
                        .HasColumnType("bit");

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("WeekDayID");

                    b.ToTable("WeekDays");
                });

            modelBuilder.Entity("iSele.Models.Notifications.NotificationEmailText", b =>
                {
                    b.Property<int>("NotificationEmailTextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateLastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("NotificationEmailTextID");

                    b.ToTable("NotificationEmailTexts");
                });

            modelBuilder.Entity("iSele.Models.Notifications.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NotificationTypeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationTypeID");

                    b.HasIndex("NotificationTypeName")
                        .IsUnique()
                        .HasFilter("[NotificationTypeName] IS NOT NULL");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("iSele.Models.Notifications.NotificationsSentLog", b =>
                {
                    b.Property<int>("NotificationsSentLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSentNotification")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationDesription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("NotificationWasSent")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("NotificationsSentLogID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("DateSentNotification");

                    b.HasIndex("NotificationTypeID")
                        .IsUnique()
                        .HasFilter("[NotificationTypeID] IS NOT NULL");

                    b.ToTable("NotificationsSentLogs");
                });

            modelBuilder.Entity("iSele.Models.Orders.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderMethodTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreparationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliveryByID")
                        .IsUnique()
                        .HasFilter("[DeliveryByID] IS NOT NULL");

                    b.HasIndex("OrderDate");

                    b.HasIndex("OrderMethodTypeID")
                        .IsUnique()
                        .HasFilter("[OrderMethodTypeID] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderFulfillment", b =>
                {
                    b.Property<int>("OrderFulfillmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FulfilledByID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("OrderFulfillmentID");

                    b.HasIndex("DateFulfilled");

                    b.HasIndex("FulfilledByID")
                        .IsUnique()
                        .HasFilter("[FulfilledByID] IS NOT NULL");

                    b.HasIndex("TrackingNumber");

                    b.ToTable("OrderFulfillments");
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderLine", b =>
                {
                    b.Property<int>("OrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("PackagingID")
                        .HasColumnType("int");

                    b.Property<decimal>("QtyOrdered")
                        .HasColumnType("decimal(8,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("VarietyID")
                        .HasColumnType("int");

                    b.HasKey("OrderLineID");

                    b.HasIndex("ItemID")
                        .IsUnique()
                        .HasFilter("[ItemID] IS NOT NULL");

                    b.HasIndex("OrderID");

                    b.HasIndex("PackagingID")
                        .IsUnique()
                        .HasFilter("[PackagingID] IS NOT NULL");

                    b.HasIndex("VarietyID")
                        .IsUnique()
                        .HasFilter("[VarietyID] IS NOT NULL");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderMethodType", b =>
                {
                    b.Property<int>("OrderMethodTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("MethodType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrderMethodTypeID");

                    b.HasIndex("MethodType")
                        .IsUnique()
                        .HasFilter("[MethodType] IS NOT NULL");

                    b.ToTable("OrderMethodTypes");
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderOptions", b =>
                {
                    b.Property<int>("OrderOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("EmailConfirmationSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("InvoiceIsPrepared")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReadyForDispatch")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PODImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderOptionsID");

                    b.ToTable("OrderOptions");
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderPaymentOptions", b =>
                {
                    b.Property<int>("OrderPaymentOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrder")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OrderPaymentOptionsID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PaymentTypeID")
                        .IsUnique()
                        .HasFilter("[PaymentTypeID] IS NOT NULL");

                    b.ToTable("OrderPaymentOptions");
                });

            modelBuilder.Entity("iSele.Models.Orders.RecurringOrder", b =>
                {
                    b.Property<int>("RecurringOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLastDone")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryByID")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NextDateRequired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecurringTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RecurringValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequireUntilDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RecurringOrderID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("DateLastDone");

                    b.HasIndex("DeliveryByID")
                        .IsUnique()
                        .HasFilter("[DeliveryByID] IS NOT NULL");

                    b.HasIndex("RecurringTypeID")
                        .IsUnique()
                        .HasFilter("[RecurringTypeID] IS NOT NULL");

                    b.ToTable("RecurringOrders");
                });

            modelBuilder.Entity("iSele.Models.Orders.RecurringOrderItem", b =>
                {
                    b.Property<int>("RecurringOrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemRequiredID")
                        .HasColumnType("int");

                    b.Property<int?>("PackagingRequiredID")
                        .HasColumnType("int");

                    b.Property<decimal>("QtyRequired")
                        .HasColumnType("decimal(8,4)");

                    b.Property<int>("RecurringOrderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("VarietyRequiredID")
                        .HasColumnType("int");

                    b.HasKey("RecurringOrderItemID");

                    b.HasIndex("ItemRequiredID")
                        .IsUnique()
                        .HasFilter("[ItemRequiredID] IS NOT NULL");

                    b.HasIndex("PackagingRequiredID")
                        .IsUnique()
                        .HasFilter("[PackagingRequiredID] IS NOT NULL");

                    b.HasIndex("RecurringOrderID");

                    b.HasIndex("VarietyRequiredID")
                        .IsUnique()
                        .HasFilter("[VarietyRequiredID] IS NOT NULL");

                    b.ToTable("RecurringOrderItem");
                });

            modelBuilder.Entity("iSele.Models.Orders.RecurringType", b =>
                {
                    b.Property<int>("RecurringTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RecurringTypeID");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("RecurringTypes");
                });

            modelBuilder.Entity("iSele.Models.Repairs.MachineCondition", b =>
                {
                    b.Property<int>("MachineConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MachineConditionID");

                    b.HasIndex("ConditionName")
                        .IsUnique();

                    b.HasIndex("SortOrder", "ConditionName");

                    b.ToTable("MachineConditions");
                });

            modelBuilder.Entity("iSele.Models.Repairs.Repair", b =>
                {
                    b.Property<int>("RepairID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int?>("EquipmentTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeanLidOk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrotherWorking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterLidOk")
                        .HasColumnType("bit");

                    b.Property<string>("JobCardNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastStatusChange")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineConditionID")
                        .HasColumnType("int");

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedOrderID")
                        .HasColumnType("int");

                    b.Property<string>("RepairFaultDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RepairFaultID")
                        .HasColumnType("int");

                    b.Property<int?>("RepairStatusID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SwopOutEquipmentID")
                        .HasColumnType("int");

                    b.Property<bool>("TakenBeanLid")
                        .HasColumnType("bit");

                    b.Property<bool>("TakenFrother")
                        .HasColumnType("bit");

                    b.Property<bool>("TakenWaterLid")
                        .HasColumnType("bit");

                    b.HasKey("RepairID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("EquipmentSerialNumber");

                    b.HasIndex("EquipmentTypeID")
                        .IsUnique()
                        .HasFilter("[EquipmentTypeID] IS NOT NULL");

                    b.HasIndex("JobCardNumber");

                    b.HasIndex("MachineConditionID")
                        .IsUnique()
                        .HasFilter("[MachineConditionID] IS NOT NULL");

                    b.HasIndex("RepairFaultID")
                        .IsUnique()
                        .HasFilter("[RepairFaultID] IS NOT NULL");

                    b.HasIndex("RepairStatusID")
                        .IsUnique()
                        .HasFilter("[RepairStatusID] IS NOT NULL");

                    b.HasIndex("SwopOutEquipmentID")
                        .IsUnique()
                        .HasFilter("[SwopOutEquipmentID] IS NOT NULL");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("iSele.Models.Repairs.RepairFault", b =>
                {
                    b.Property<int>("RepairFaultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<string>("RepairFaultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("RepairFaultID");

                    b.HasIndex("RepairFaultName")
                        .IsUnique();

                    b.HasIndex("SortOrder", "RepairFaultName");

                    b.ToTable("RepairFaults");
                });

            modelBuilder.Entity("iSele.Models.Repairs.RepairStatus", b =>
                {
                    b.Property<int>("RepairStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EmailClient")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepairStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("RepairStatusID");

                    b.HasIndex("RepairStatusName")
                        .IsUnique();

                    b.HasIndex("SortOrder", "RepairStatusName");

                    b.ToTable("RepairStatuses");
                });

            modelBuilder.Entity("iSele.Models.System.Party", b =>
                {
                    b.Property<int>("PartyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForOrderFulfillment")
                        .HasColumnType("bit");

                    b.Property<string>("LoginUserID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("NormalDeliveryDoWID")
                        .HasColumnType("int");

                    b.Property<string>("PartysName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PartyID");

                    b.HasIndex("Abbreviation")
                        .IsUnique()
                        .HasFilter("[Abbreviation] IS NOT NULL");

                    b.HasIndex("NormalDeliveryDoWID")
                        .IsUnique()
                        .HasFilter("[NormalDeliveryDoWID] IS NOT NULL");

                    b.HasIndex("PartysName")
                        .IsUnique();

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("iSele.Models.System.SystemPreferences", b =>
                {
                    b.Property<int>("SystemPreferencesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLastPrepDateCalcd")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultDeliveryPersonID")
                        .HasColumnType("int");

                    b.Property<bool>("DoReccuringOrders")
                        .HasColumnType("bit");

                    b.Property<int>("GroupItemTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ImageFolderPath")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastReccurringDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MinReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SystemPreferencesID");

                    b.ToTable("SystemPreferences");
                });

            modelBuilder.Entity("iSele.Models.System.TotalCountTracker", b =>
                {
                    b.Property<int>("TotalCountTrackerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CountDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("TotalCountTrackerID");

                    b.ToTable("TotalCounterTracker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceGroup", b =>
                {
                    b.HasOne("iSele.Models.Accounts.PriceListType", "PriceListType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Accounts.PriceGroup", "PriceListTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Accounts.PriceListType", b =>
                {
                    b.HasOne("iSele.Models.Accounts.VATTaxType", "VATTaxType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Accounts.PriceListType", "VATTaxTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Customers.Address", b =>
                {
                    b.HasOne("iSele.Models.General.City", "City")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.Address", "CityID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Customers.Customer", b =>
                {
                    b.HasOne("iSele.Models.Customers.CustomerAccountingOptions", "CustomerAccountingOptions")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.Customer", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Customers.CustomerFulfilmentOptions", "CustomerFulfilmentOptions")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.Customer", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Customers.CustomerType", "CustomerType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.Customer", "CustomerTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerAccountingOptions", b =>
                {
                    b.HasOne("iSele.Models.Accounts.InvoiceType", "InvoiceType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerAccountingOptions", "InvoiceTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Accounts.PaymentTerm", "PaymentTerms")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerAccountingOptions", "PaymentTermsID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Accounts.PriceLevel", "PriceLevel")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerAccountingOptions", "PriceLevelID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Customers.Address", "PrimaryBillingAddress")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerAccountingOptions", "PrimaryBillingAddressID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iSele.Models.Customers.Address", "PrimaryShippingAddress")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerAccountingOptions", "PrimaryShippingAddressID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerContact", b =>
                {
                    b.HasOne("iSele.Models.Customers.ContactType", "ContactType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerContact", "ContactTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iSele.Models.Customers.Customer", null)
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Customers.Address", "PostalAddress")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerContact", "PostalAddressID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iSele.Models.Customers.Address", "ShippingAddress")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerContact", "ShippingAddressID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerEquipment", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", null)
                        .WithMany("CustomerEquipment")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.General.EquipmentType", "EquipmentType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerEquipment", "EquipmentTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerFulfilmentOptions", b =>
                {
                    b.HasOne("iSele.Models.Lookups.PreferedDeliveryTime", "PreferedDeliveryTime")
                        .WithMany()
                        .HasForeignKey("PreferedDeliveryTimeID");

                    b.HasOne("iSele.Models.Lookups.WeekDay", "PreferedDispatchDay")
                        .WithMany()
                        .HasForeignKey("PreferedDispatchDayID");

                    b.HasOne("iSele.Models.Customers.CustomerPostalAddress", "PreferedPostalAddress")
                        .WithMany()
                        .HasForeignKey("CustomerID", "PreferedPostalAddressID");

                    b.HasOne("iSele.Models.Customers.CustomerShippingAddress", "PreferedShippingAddress")
                        .WithMany()
                        .HasForeignKey("CustomerID", "PreferedShippingAddressID");
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerPostalAddress", b =>
                {
                    b.HasOne("iSele.Models.Customers.CustomerFulfilmentOptions", null)
                        .WithMany("CustomerPostalAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerPrefPerType", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", null)
                        .WithMany("CustomerPrefPerTypes")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Items.Item", "Item")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerPrefPerType", "ItemID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Packaging", "Packaging")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerPrefPerType", "PackagingID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Variety", "Variety")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Customers.CustomerPrefPerType", "VarietyID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Customers.CustomerShippingAddress", b =>
                {
                    b.HasOne("iSele.Models.Customers.CustomerFulfilmentOptions", null)
                        .WithMany("CustomerShippingAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSele.Models.General.AreaDaySetting", b =>
                {
                    b.HasOne("iSele.Models.General.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iSele.Models.General.Area", null)
                        .WithMany("AreaDaySettings")
                        .HasForeignKey("AreaID2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iSele.Models.Lookups.WeekDay", "PreperationDayOfWeek")
                        .WithMany()
                        .HasForeignKey("PreperationDayOfWeekID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.General.City", b =>
                {
                    b.HasOne("iSele.Models.General.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.General.DemoEquipment", b =>
                {
                    b.HasOne("iSele.Models.General.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.General.DemoEquipmentUsage", b =>
                {
                    b.HasOne("iSele.Models.General.DemoEquipment", null)
                        .WithMany("DemoEquipmentUsage")
                        .HasForeignKey("DemoEquipmentID")
                        .IsRequired();
                });

            modelBuilder.Entity("iSele.Models.General.PostCodeArea", b =>
                {
                    b.HasOne("iSele.Models.General.AreaDaySetting", "AreaDaySetting")
                        .WithMany()
                        .HasForeignKey("AreaDayID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Items.Item", b =>
                {
                    b.HasOne("iSele.Models.Items.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.ItemUnit", "ItemUnit")
                        .WithMany()
                        .HasForeignKey("ItemUnitID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Item", "ReplacementItem")
                        .WithMany()
                        .HasForeignKey("ReplacementItemID");

                    b.HasOne("iSele.Models.Accounts.VATTaxType", "VATTaxType")
                        .WithMany()
                        .HasForeignKey("VATTaxTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Items.ItemGroup", b =>
                {
                    b.HasOne("iSele.Models.Items.Item", "GroupItem")
                        .WithMany()
                        .HasForeignKey("GroupItemID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("iSele.Models.Items.ItemPrice", b =>
                {
                    b.HasOne("iSele.Models.Items.Item", null)
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Accounts.PriceListType", "PriceListType")
                        .WithMany()
                        .HasForeignKey("PriceListTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Items.UsedItemGroup", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Items.Item", "GroupItemName")
                        .WithMany()
                        .HasForeignKey("GroupItemID");
                });

            modelBuilder.Entity("iSele.Models.Notifications.NotificationsSentLog", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Notifications.NotificationsSentLog", "CustomerID")
                        .IsRequired();

                    b.HasOne("iSele.Models.Notifications.NotificationType", "NotificationType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Notifications.NotificationsSentLog", "NotificationTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.Order", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.System.Party", "DeliveryBy")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.Order", "DeliveryByID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Orders.OrderFulfillment", "OrderFulfillment")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Orders.OrderOptions", "OrderOptions")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.Order", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Orders.OrderPaymentOptions", "OrderPaymentOptions")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.Order", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Orders.OrderMethodType", "OrderMethodType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.Order", "OrderMethodTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderFulfillment", b =>
                {
                    b.HasOne("iSele.Models.System.Party", "FulfilledBy")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.OrderFulfillment", "FulfilledByID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderLine", b =>
                {
                    b.HasOne("iSele.Models.Items.Item", "Item")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.OrderLine", "ItemID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Orders.Order", null)
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Items.Packaging", "Packaging")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.OrderLine", "PackagingID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Variety", "Variety")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.OrderLine", "VarietyID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.OrderPaymentOptions", b =>
                {
                    b.HasOne("iSele.Models.Accounts.PaymentType", "PaymentType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.OrderPaymentOptions", "PaymentTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.RecurringOrder", b =>
                {
                    b.HasOne("iSele.Models.Customers.CustomerFulfilmentOptions", null)
                        .WithMany("RecurringOrders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Customers.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrder", "CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iSele.Models.System.Party", "DeliveryBy")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrder", "DeliveryByID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Orders.RecurringType", "RecurringType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrder", "RecurringTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Orders.RecurringOrderItem", b =>
                {
                    b.HasOne("iSele.Models.Items.Item", "ItemRequired")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrderItem", "ItemRequiredID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Items.Packaging", "Packaging")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrderItem", "PackagingRequiredID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Orders.RecurringOrder", null)
                        .WithMany("RecurringOrderItems")
                        .HasForeignKey("RecurringOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSele.Models.Items.Variety", "Variety")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Orders.RecurringOrderItem", "VarietyRequiredID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.Repairs.Repair", b =>
                {
                    b.HasOne("iSele.Models.Customers.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iSele.Models.General.EquipmentType", "EquipmentType")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "EquipmentTypeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iSele.Models.Repairs.MachineCondition", "MachineCondition")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "MachineConditionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Repairs.RepairFault", "RepairFault")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "RepairFaultID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.Repairs.RepairStatus", "RepairStatus")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "RepairStatusID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSele.Models.General.DemoEquipment", "SwopOutEquipment")
                        .WithOne()
                        .HasForeignKey("iSele.Models.Repairs.Repair", "SwopOutEquipmentID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("iSele.Models.System.Party", b =>
                {
                    b.HasOne("iSele.Models.Lookups.WeekDay", "NormalDeliveryDoW")
                        .WithOne()
                        .HasForeignKey("iSele.Models.System.Party", "NormalDeliveryDoWID")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
